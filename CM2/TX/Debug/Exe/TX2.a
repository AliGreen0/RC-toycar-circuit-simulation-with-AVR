;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : TX2
;Version :
;Date    : 06/10/2017
;Author  :
;Company :
;Comments:
;sender
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;#include <stdlib.h>
;
;int i,a,b,z[4]={0xfe,0xfd,0xfb,0xf7};

	.DSEG
;char s[];
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index=0,tx_rd_index=0;
;#else
;unsigned int tx_wr_index=0,tx_rd_index=0;
;#endif
;
;#if TX_BUFFER_SIZE < 256
;unsigned char tx_counter=0;
;#else
;unsigned int tx_counter=0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 003B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003C if (tx_counter)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 003D    {
; 0000 003E    --tx_counter;
;PCODE: $00000011 VOL: 0
; 0000 003F    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0040 #if TX_BUFFER_SIZE != 256
; 0000 0041    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0042 #endif
; 0000 0043    }
;PCODE: $0000001C VOL: 0
; 0000 0044 }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 004B {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 004C while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $00000023 VOL: 0
;	c -> Y+0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 004D #asm("cli")
;PCODE: $0000002A VOL: 0
	cli
;PCODE: $0000002B VOL: 0
; 0000 004E if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 004F    {
; 0000 0050    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0051 #if TX_BUFFER_SIZE != 256
; 0000 0052    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0053 #endif
; 0000 0054    ++tx_counter;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0055    }
; 0000 0056 else
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0057    UDR=c;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0058 #asm("sei")
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0000 0059 }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;void main(void)
; 0000 0061 {
;PCODE: $00000049 VOL: 0
; 0000 0062 // Declare your local variables here
; 0000 0063 
; 0000 0064 // Input/Output Ports initialization
; 0000 0065 // Port A initialization
; 0000 0066 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0067 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0068 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0069 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 006A 
; 0000 006B // Port B initialization
; 0000 006C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006D DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 006E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 006F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0070 
; 0000 0071 // Port C initialization
; 0000 0072 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0073 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0074 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0075 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0076 
; 0000 0077 // Port D initialization
; 0000 0078 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0079 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 007A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 007C 
; 0000 007D // Timer/Counter 0 initialization
; 0000 007E // Clock source: System Clock
; 0000 007F // Clock value: Timer 0 Stopped
; 0000 0080 // Mode: Normal top=0xFF
; 0000 0081 // OC0 output: Disconnected
; 0000 0082 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0083 TCNT0=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0084 OCR0=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0085 
; 0000 0086 // Timer/Counter 1 initialization
; 0000 0087 // Clock source: System Clock
; 0000 0088 // Clock value: Timer1 Stopped
; 0000 0089 // Mode: Normal top=0xFFFF
; 0000 008A // OC1A output: Disconnected
; 0000 008B // OC1B output: Disconnected
; 0000 008C // Noise Canceler: Off
; 0000 008D // Input Capture on Falling Edge
; 0000 008E // Timer1 Overflow Interrupt: Off
; 0000 008F // Input Capture Interrupt: Off
; 0000 0090 // Compare A Match Interrupt: Off
; 0000 0091 // Compare B Match Interrupt: Off
; 0000 0092 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0093 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0094 TCNT1H=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0095 TCNT1L=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0096 ICR1H=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0097 ICR1L=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0098 OCR1AH=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0099 OCR1AL=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 009A OCR1BH=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 009B OCR1BL=0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 009C 
; 0000 009D // Timer/Counter 2 initialization
; 0000 009E // Clock source: System Clock
; 0000 009F // Clock value: Timer2 Stopped
; 0000 00A0 // Mode: Normal top=0xFF
; 0000 00A1 // OC2 output: Disconnected
; 0000 00A2 ASSR=0<<AS2;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00A3 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00A4 TCNT2=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00A5 OCR2=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00A6 
; 0000 00A7 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00A8 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00A9 
; 0000 00AA // External Interrupt(s) initialization
; 0000 00AB // INT0: Off
; 0000 00AC // INT1: Off
; 0000 00AD // INT2: Off
; 0000 00AE MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00AF MCUCSR=(0<<ISC2);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00B0 
; 0000 00B1 // USART initialization
; 0000 00B2 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00B3 // USART Receiver: Off
; 0000 00B4 // USART Transmitter: On
; 0000 00B5 // USART Mode: Asynchronous
; 0000 00B6 // USART Baud Rate: 4800
; 0000 00B7 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00B8 UCSRB=(0<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00B9 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00BA UBRRH=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00BB UBRRL=0x0C;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00BC 
; 0000 00BD // Analog Comparator initialization
; 0000 00BE // Analog Comparator: Off
; 0000 00BF // The Analog Comparator's positive input is
; 0000 00C0 // connected to the AIN0 pin
; 0000 00C1 // The Analog Comparator's negative input is
; 0000 00C2 // connected to the AIN1 pin
; 0000 00C3 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00C4 SFIOR=(0<<ACME);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00C5 
; 0000 00C6 // ADC initialization
; 0000 00C7 // ADC disabled
; 0000 00C8 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00C9 
; 0000 00CA // SPI initialization
; 0000 00CB // SPI disabled
; 0000 00CC SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00CD 
; 0000 00CE // TWI initialization
; 0000 00CF // TWI disabled
; 0000 00D0 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00D1 
; 0000 00D2 // Alphanumeric LCD initialization
; 0000 00D3 // Connections are specified in the
; 0000 00D4 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00D5 // RS - PORTB Bit 0
; 0000 00D6 // RD - PORTB Bit 1
; 0000 00D7 // EN - PORTB Bit 2
; 0000 00D8 // D4 - PORTB Bit 4
; 0000 00D9 // D5 - PORTB Bit 5
; 0000 00DA // D6 - PORTB Bit 6
; 0000 00DB // D7 - PORTB Bit 7
; 0000 00DC // Characters/line: 16
; 0000 00DD lcd_init(16);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00DE 
; 0000 00DF // Global enable interrupts
; 0000 00E0 #asm("sei")
;PCODE: $00000098 VOL: 0
	sei
;PCODE: $00000099 VOL: 0
; 0000 00E1 DDRA=0x0f;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00E2 PORTA=0xf0;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00E3 
; 0000 00E4 while (1)
;PCODE: $0000009E VOL: 0
; 0000 00E5       {
; 0000 00E6 
; 0000 00E7       for(i=0;i<4;i++)
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00E8       {
; 0000 00E9 
; 0000 00EA       PORTA=z[i];
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00EB       b=PINA-DDRA;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00EC 
; 0000 00ED       switch (b){
;PCODE: $000000B5 VOL: 0
; 0000 00EE 
; 0000 00EF       case 207:
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00F0       a=1;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00F1       putchar(a);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00F2       delay_ms(30);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00F3       break;
;PCODE: $000000BF VOL: 0
; 0000 00F4 
; 0000 00F5       case 204:
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00F6       a=2;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00F7       putchar(a);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00F8       delay_ms(30);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00F9       break;
;PCODE: $000000CA VOL: 0
; 0000 00FA 
; 0000 00FB       case 174:
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00FC       a=3;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00FD       putchar(a);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00FE       delay_ms(30);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00FF       break;
;PCODE: $000000D5 VOL: 0
; 0000 0100 
; 0000 0101       case 222:
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0102       a=4;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0103       putchar(a);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0104       delay_ms(30);                  //0xfe,0xfd,0xfb,0xf7
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0105       break;
;PCODE: $000000E0 VOL: 0
; 0000 0106 
; 0000 0107       case 175:
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0108       a=5;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0109       putchar(a);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 010A       delay_ms(30);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 010B       break;
;PCODE: $000000EB VOL: 0
; 0000 010C 
; 0000 010D       case 223:
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 010E       a=6;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 010F       putchar(a);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0110       delay_ms(30);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0111       break;
;PCODE: $000000F6 VOL: 0
; 0000 0112 
; 0000 0113       case 172:
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0114       a=7;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0115       putchar(a);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0116       delay_ms(30);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0117       break;
;PCODE: $00000101 VOL: 0
; 0000 0118 
; 0000 0119       case 220:
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 011A       a=8;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 011B       putchar(a);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 011C       delay_ms(30);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 011D       break;
;PCODE: $0000010C VOL: 0
; 0000 011E 
; 0000 011F       default:
;PCODE: $0000010D VOL: 0
; 0000 0120       a=9;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0121       putchar(a);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0122 
; 0000 0123       }
;PCODE: $00000112 VOL: 0
; 0000 0124 
; 0000 0125       lcd_clear();
;PCODE: $00000113 VOL: 0
; 0000 0126       itoa(a,s);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0127       lcd_puts(s);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0128 
; 0000 0129       }
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 012A       }
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 012B }
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
